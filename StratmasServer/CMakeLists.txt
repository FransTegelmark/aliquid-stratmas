# <Copyright Holder>. Copyright (C) <Copyright Year(s)>. <License>.

#
# Project Properties
#
CMAKE_MINIMUM_REQUIRED (VERSION 2.6.2)
PROJECT (stratmas-server)
SET (APPLICATION_NAME "Stratmas Server")
SET (APPLICATION_COPYRIGHT_YEARS "2014")
SET (APPLICATION_VERSION_MAJOR 7)
SET (APPLICATION_VERSION_MINOR 5)
SET (APPLICATION_VERSION_PATCH 1)
SET (APPLICATION_VERSION_STRING "${APPLICATION_VERSION_MAJOR}.${APPLICATION_VERSION_MINOR}.${APPLICATION_VERSION_PATCH}-${APPLICATION_VERSION_TYPE}")
SET (APPLICATION_VENDOR_NAME "Your Company")
SET (APPLICATION_VENDOR_URL "yourcompany.com")

option(TESTS_ENABLED "Enable tests build" OFF)

#
# CMake Debugging Options
#
SET (CMAKE_VERBOSE_MAKEFILE 0) # Use 1 for debugging, 0 for release

#
# Project Output Paths
#
SET (MAINFOLDER ${PROJECT_SOURCE_DIR})
SET (EXECUTABLE_OUTPUT_PATH "${MAINFOLDER}/bin")
#SET (LIBRARY_OUTPUT_PATH "${MAINFOLDER}/lib")

#
# Project Search Paths
#
LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}")
LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}/tools")
LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}/lib")
SET (CMAKE_MODULE_PATH "${MAINFOLDER}/tools/share/cmake")
#INCLUDE_DIRECTORIES("${MAINFOLDER}/include")

#
# Locate Project Prerequisites 
#
SET (Boost_ADDITIONAL_VERSIONS "1.39" "1.39.0" "1.40" "1.40.0" "1.41" "1.41.0" "1.42" "1.42.0" "1.43" "1.43.0" "1.44" "1.44.0" "1.45" "1.45.0" "1.46" "1.46.0" "1.47" "1.47.0" "1.48" "1.48.0" "1.49" "1.49.0" "1.50" "1.50.0")
SET (Boost_USE_MULTITHREADED ON)
FIND_PACKAGE (Boost 1.37 COMPONENTS "date_time" "filesystem" "program_options" "system" "thread" REQUIRED)
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})
#FIND_PACKAGE (Log4Cxx REQUIRED)
#INCLUDE_DIRECTORIES(${Log4Cxx_INCLUDE_DIRS})
#LINK_DIRECTORIES(${Log4Cxx_LIBRARY_DIRS})
if(TESTS_ENABLED)
  FIND_PACKAGE (UnitTestPlusPlus)
  
  IF NOT (${UnitTestPlusPlus_FOUND})
    include(UnitTestPlusPlus)
    ExternalProject_Add(
      UnitTestPlusPlus
      SVN_REPOSITORY https://unittest-cpp.svn.sourceforge.net/svnroot/unittest-cpp
      CONFIGURE_COMMAND <SOURCE_DIR>/configure
       --prefix=<INSTALL_DIR>
      BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/libs
      UPDATE_COMMAND “”
    )
  ENDIF()

  FIND_PACKAGE (UnitTestPlusPlus REQUIRED)
  INCLUDE_DIRECTORIES(${UnitTestPlusPlus_INCLUDE_DIRS})
  LINK_DIRECTORIES(${UnitTestPlusPlus_LIBRARY_DIRS})
endif()
FIND_PACKAGE (XercesC REQUIRED)
INCLUDE_DIRECTORIES(${XercesC_INCLUDE_DIRS})
LINK_DIRECTORIES(${XercesC_LIBRARY_DIRS})



#
# Build settings
#
set(DEBUG_FLAGS "-g -O0 -Wall")
set(RELEASE_FLAGS "-O3")

set(CMAKE_CXX_FLAGS_DEBUG ${DEBUG_FLAGS})
set(CMAKE_C_FLAGS_DEBUG ${DEBUG_FLAGS})

set(CMAKE_CONFIGURATION_TYPES Debug Release)

#
# Configure Files
#
FILE (GLOB_RECURSE CONFIGINPUTS3 src/*.in.h.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS4 src/*.h.in.cmake)
if(TESTS_ENABLED)
  FILE (GLOB_RECURSE CONFIGINPUTS5 test/*.in.h.cmake)
  FILE (GLOB_RECURSE CONFIGINPUTS6 test/*.h.in.cmake)
endif()
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS3}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS4}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS5}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS6}")
FOREACH (CONFIGINPUT ${CONFIGINPUTS})
    STRING (REPLACE ".in.h.cmake" ".h" CONFIGOUTPUT1 "${CONFIGINPUT}")
    STRING (REPLACE ".h.in.cmake" ".h" CONFIGOUTPUT2 "${CONFIGOUTPUT1}")
    CONFIGURE_FILE ("${CONFIGINPUT}" "${CONFIGOUTPUT2}")
ENDFOREACH (CONFIGINPUT ${CONFIGINPUTS})

#
# Add Build Targets
#
#TODO build xerces and boost if not found
ADD_SUBDIRECTORY(src)
if(TESTS_ENABLED)
  ADD_SUBDIRECTORY(test)
endif()

#
# Add Install Targets
#
IF (EXISTS "${MAINFOLDER}/include/${PROJECT_NAME}" AND IS_DIRECTORY "${MAINFOLDER}/include/${PROJECT_NAME}")
    INSTALL(DIRECTORY "${MAINFOLDER}/include/${PROJECT_NAME}" DESTINATION "include")
ENDIF (EXISTS "${MAINFOLDER}/include/${PROJECT_NAME}" AND IS_DIRECTORY "${MAINFOLDER}/include/${PROJECT_NAME}")

#
# Add Documentation Targets
#
INCLUDE (DocumentationTargets)
