
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Mar 07 13:29:51 CET 2012
//----------------------------------------------------

package StratmasClient.TaclanV2;

import StratmasClient.TaclanV2.java_cup.runtime.Symbol;
import StratmasClient.object.StratmasList;
import StratmasClient.object.StratmasObject;
import StratmasClient.object.type.TypeFactory;
import StratmasClient.object.type.TypeInformation;
import StratmasClient.object.type.Type;
import StratmasClient.object.type.Declaration;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.FileNotFoundException;
import java.io.UnsupportedEncodingException;
import java.util.Vector;
import java.util.Enumeration;

/** CUP v0.10k generated parser.
  * @version Wed Mar 07 13:29:51 CET 2012
  */
public class Parser extends StratmasClient.TaclanV2.java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(StratmasClient.TaclanV2.java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\004\002\000\002\002\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\003\007" +
    "\000\002\003\003\000\002\003\006\000\002\003\010\000" +
    "\002\005\004\000\002\006\006\000\002\006\010\000\002" +
    "\006\010\000\002\007\005\000\002\010\003\000\002\010" +
    "\005\000\002\011\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\010\002\001\005\004\015\006\001\002\000" +
    "\022\002\ufff1\005\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\020\ufff1\001\002\000\012\002\ufffb\005\ufffb\014" +
    "\ufffb\015\ufffb\001\002\000\006\004\056\005\004\001\002" +
    "\000\004\002\054\001\002\000\012\002\001\005\004\014" +
    "\001\015\006\001\002\000\012\002\001\005\004\014\001" +
    "\015\006\001\002\000\012\002\001\005\004\014\001\015" +
    "\006\001\002\000\010\005\004\012\015\013\014\001\002" +
    "\000\010\005\004\014\001\015\006\001\002\000\022\004" +
    "\027\005\004\006\023\007\033\010\026\011\031\013\024" +
    "\015\032\001\002\000\004\013\017\001\002\000\010\005" +
    "\004\014\001\015\006\001\002\000\004\014\021\001\002" +
    "\000\012\002\ufffc\005\ufffc\014\ufffc\015\ufffc\001\002\000" +
    "\016\002\ufff3\005\ufff3\013\044\014\ufff3\015\ufff3\016\ufff3" +
    "\001\002\000\012\002\uffee\005\uffee\014\uffee\015\uffee\001" +
    "\002\000\010\005\004\014\001\015\006\001\002\000\014" +
    "\002\ufff0\005\ufff0\014\ufff0\015\ufff0\016\037\001\002\000" +
    "\012\002\uffec\005\uffec\014\uffec\015\uffec\001\002\000\012" +
    "\002\uffef\005\uffef\014\uffef\015\uffef\001\002\000\012\002" +
    "\ufff4\005\ufff4\014\ufff4\015\ufff4\001\002\000\012\002\uffeb" +
    "\005\uffeb\014\uffeb\015\uffeb\001\002\000\004\005\004\001" +
    "\002\000\012\002\uffed\005\uffed\014\uffed\015\uffed\001\002" +
    "\000\006\016\037\020\036\001\002\000\016\002\ufff3\005" +
    "\ufff3\014\ufff3\015\ufff3\016\ufff3\020\ufff3\001\002\000\004" +
    "\004\041\001\002\000\004\005\004\001\002\000\016\002" +
    "\ufff2\005\ufff2\014\ufff2\015\ufff2\016\ufff2\020\ufff2\001\002" +
    "\000\012\002\ufff5\005\ufff5\014\ufff5\015\ufff5\001\002\000" +
    "\004\014\043\001\002\000\012\002\uffea\005\uffea\014\uffea" +
    "\015\uffea\001\002\000\010\005\004\014\001\015\006\001" +
    "\002\000\004\014\046\001\002\000\012\002\ufff9\005\ufff9" +
    "\014\ufff9\015\ufff9\001\002\000\004\014\050\001\002\000" +
    "\012\002\ufffa\005\ufffa\014\ufffa\015\ufffa\001\002\000\006" +
    "\002\uffff\014\uffff\001\002\000\006\002\ufffd\014\ufffd\001" +
    "\002\000\006\002\ufffe\014\ufffe\001\002\000\004\002\000" +
    "\001\002\000\006\016\037\020\057\001\002\000\012\002" +
    "\ufff8\005\ufff8\014\ufff8\015\ufff8\001\002\000\004\004\060" +
    "\001\002\000\014\002\ufff7\005\ufff7\014\ufff7\015\ufff7\017" +
    "\061\001\002\000\004\005\004\001\002\000\012\002\ufff6" +
    "\005\ufff6\014\ufff6\015\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\016\003\011\004\006\005\010\006\004\007" +
    "\007\011\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\054\011\034\001\001\000\002\001\001\000" +
    "\016\003\011\004\052\005\010\006\004\007\007\011\012" +
    "\001\001\000\016\003\011\004\051\005\010\006\004\007" +
    "\007\011\012\001\001\000\016\003\011\004\050\005\010" +
    "\006\004\007\007\011\012\001\001\000\004\011\015\001" +
    "\001\000\016\003\011\004\046\005\010\006\004\007\007" +
    "\011\012\001\001\000\010\010\024\011\021\012\027\001" +
    "\001\000\002\001\001\000\016\003\011\004\017\005\010" +
    "\006\004\007\007\011\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\011\004\041\005\010\006\004\007\007\011\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\033\011" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\037\011\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\011\004\044\005\010\006" +
    "\004\007\007\011\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\061\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public StratmasClient.TaclanV2.java_cup.runtime.Symbol do_action(
    int                        act_num,
    StratmasClient.TaclanV2.java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws SemanticException, SyntaxException
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /**
     * The location beeing parsed by this parser.
     */
    String location = null;

    /**
     * The list that becomes the result of parsing the specified
     * location
     */
    ParsedDeclarationList parsedDeclarationList = null;

    /**
     * The errors collected during parsing.
     */
    Vector errors = new Vector();

    /**
     * Creates a new parser given a stream and some name (the name is
     * used mainly for error reporting and resolving some common
     * importation errors (see ParsedImport.java)).
     *
     * @param streamName a name to give the stream.
     * @param stream the taclan2 stream to parse.
     */
    public static Parser getParser(String streamName, Reader stream)
        {
            Parser parser = new Parser(new Lexer(stream));
            parser.setLocation(streamName);

            return parser;
        }

    /**
     * Creates a new parser by opening a file using the users
     * default char encoding.
     *
     * @param filename the taclan2 file to parse.
     */
    public static Parser getParser(String filename) throws FileNotFoundException
        {
            return getParser(filename, 
                             new InputStreamReader(new FileInputStream(filename)));
        }

    /**
     * Creates a new parser by opening a file using the specified encoding.
     *
     * @param filename the taclan2 file to parse.
     * @param encoding the encoding to use.
     */
    public static Parser getParser(String filename, String encoding) 
        throws FileNotFoundException, UnsupportedEncodingException
        {
            return getParser(filename, 
                             new InputStreamReader(new FileInputStream(filename), 
                                                   encoding));
        }

    /**
     * Parses the file given when constructing the parser.
     */
    public void doParse() throws SemanticException, SyntaxException
        {
            if (this.parsedDeclarationList == null) {
                this.parsedDeclarationList = (ParsedDeclarationList) parse().value;
                if (!errors.isEmpty()) {
                    throw new CollectedErrorsException(errors);
                }
            }
        }

    /**
     * Returns the parsedDeclarationList that the file resulted in.
     */
    public ParsedDeclarationList getParsedDeclarationList() throws SemanticException, SyntaxException
        {
            doParse();
            return this.parsedDeclarationList;
        }

    /**
     * Performs type checking using the supplied TypeInformation 
     *
     * @param declaration the declaration the top object(s) should
     * @param typeInformation the TypeInformation to use.
     * conform to.
     */
    public void typeCheck(Declaration declaration, TypeInformation typeInformation) 
        throws SemanticException, SyntaxException
        {
            // Get document pseduotype 
            (new ParsedList(new SourcePosition(getLocation()), getParsedDeclarationList())).typeCheckImmidiates(declaration, typeInformation);
            //getParsedDeclarationList().bindReferences();
            //getParsedDeclarationList().typeCheckReferences(typeInformation, documentType);
        }

    /**
     * Returns a StratmasList containing the StratmasObjects the 
     * parsing resulted in.
     *
     * @param declaration the declaration to get.
     */
    public StratmasList getStratmasList(Declaration declaration) throws SemanticException, SyntaxException
        {            
            return (StratmasList) (new ParsedList(new SourcePosition(getLocation()), getParsedDeclarationList())).getStratmasObject(declaration);
        }
    
    /**
     * Test method for the Parser class
     * 
     * @param argv a string array where the first element is a Taclan
     * file and the second a wsd-file specifying the types.
     */
    public static void main(String[] argv)
        {

            // Check argv
            if (argv.length != 1) {
                System.err.println("Usage: java Parser file");
                System.exit(1);
            }
            try {
                Parser parser = getParser(argv[0]);
                parser.doParse();
                TypeInformation typeInformation = 
                    TypeFactory.getTypeInformation();
                parser.typeCheck(TypeFactory.getType("Root").getSubElement("simulation"), 
                                 typeInformation);
            } catch (FileNotFoundException e) {
                System.err.println(e.getMessage());
                System.exit(1);
            } catch (Exception e) { 
                e.printStackTrace(System.err);
                System.err.println(e.getMessage() + "\nExiting... ");
                System.exit(1);
            } catch (AssertionError e) { 
                e.printStackTrace(System.err);
                System.err.println(e.getMessage() + "\nExiting... ");
                System.exit(1);
            }
        }

    /**
     * Reports an error.
     *
     * @param message the error message.
     * @param info the object associated with the error.
     */
    public void report_error(String message, Object info)
        {
            this.registerError(constructSyntaxException(message, info));
        }

    /**
     * Reports a fatal error to the user.
     *
     * @param message the error message.
     * @param info the object associated with the error.
     */
    public void report_fatal_error(String message, Object info) 
        throws SyntaxException
        {
            throw constructSyntaxException(message, info);
        }
    
    /**
     * Registers an exception occured during parsing.
     *
     * @param e the exception to register.
     */
    public void registerError(Exception e)
        {
            this.errors.add(e);
        }
    
    /**
     * Constructs a syntax error from the provided information
     *
     * @param message the error message.
     * @param info the object associated with the error.
     */

    public SyntaxException constructSyntaxException(String message, Object info)
        {
            StringBuffer errmsg = new StringBuffer();
            
            if (info instanceof Symbol) {
                Symbol symbol = (Symbol) info;
                if (symbol.value instanceof Symbol) {
                    symbol = (Symbol) symbol.value;
                }
                SourcePosition srcpos = new SourcePosition(this.getLocation(), symbol);
                errmsg.append(srcpos.toString() + ": At or near \"" + symbol.value.toString() + "\": ");
            }
            else {
                errmsg.append(this.getLocation() + ": ");
            }
            
            errmsg.append(message);

            return new SyntaxException(errmsg.toString());
        }


    /**
     * Sets the location of the taclan file.
     *
     * @param source the location
     */    
    public void setLocation(String source) 
        {
            this.location = source;
        }

    /**
     * Returns the location of the taclan file being parsed.
     */
    public String getLocation() 
        {
            return this.location;
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final StratmasClient.TaclanV2.java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    StratmasClient.TaclanV2.java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws SemanticException, SyntaxException
    {
      /* Symbol object for return from actions */
      StratmasClient.TaclanV2.java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // rval ::= OPENBLOCK declarations CLOSEBLOCK 
            {
              ParsedDeclaration RESULT = null;
                int openleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                int openright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                Symbol open = (Symbol)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                int declarationsleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                int declarationsright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                ParsedDeclarationList declarations = (ParsedDeclarationList)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                int closeleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
                int closeright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
                Symbol close = (Symbol)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
                
    SourcePosition srcpos = new SourcePosition(parser.getLocation(), open, close);
    RESULT = new ParsedList(srcpos, declarations);

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(8/*rval*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // rval ::= FALSE 
            {
              ParsedDeclaration RESULT = null;
                int resultleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
                int resultright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
                Symbol result = (Symbol)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
                
    SourcePosition srcpos = new SourcePosition(parser.getLocation(), result);
    RESULT = new ParsedBoolean(srcpos, false);

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(8/*rval*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // rval ::= TRUE 
            {
              ParsedDeclaration RESULT = null;
                int resultleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
                int resultright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
                Symbol result = (Symbol)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
                
    SourcePosition srcpos = new SourcePosition(parser.getLocation(), result);
    RESULT = new ParsedBoolean(srcpos, true);

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(8/*rval*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // rval ::= FLOAT 
            {
              ParsedDeclaration RESULT = null;
                int resultleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
                int resultright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
                Symbol result = (Symbol)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
                
    SourcePosition srcpos = new SourcePosition(parser.getLocation(), result);
    RESULT = new ParsedFloat(srcpos, (String) (result.value));

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(8/*rval*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // rval ::= INTEGER 
            {
              ParsedDeclaration RESULT = null;
                int resultleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
                int resultright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
                Symbol result = (Symbol)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
                
    SourcePosition srcpos = new SourcePosition(parser.getLocation(), result);
    RESULT = new ParsedInteger(srcpos, (String) (result.value));

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(8/*rval*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // rval ::= STRING 
            {
              ParsedDeclaration RESULT = null;
                int resultleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
                int resultright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
                Symbol result = (Symbol)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
                
    SourcePosition srcpos = new SourcePosition(parser.getLocation(), result);
    RESULT = new ParsedString(srcpos, (String) (result.value));

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(8/*rval*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // rval ::= reference 
            {
              ParsedDeclaration RESULT = null;
                int refleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
                int refright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
                ParsedReference ref = (ParsedReference)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
                
 RESULT = ref;

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(8/*rval*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simpleIdentifier ::= ID 
            {
              ParsedIdentifier RESULT = null;
                int idleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
                int idright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
                Symbol id = (Symbol)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
                
 SourcePosition srcpos = new SourcePosition(parser.getLocation(), id);

 RESULT = new ParsedIdentifier(srcpos, (String) (id.value));

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(7/*simpleIdentifier*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // reference ::= reference SCOPE reference 
            {
              ParsedReference RESULT = null;
                int tailleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                int tailright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                ParsedReference tail = (ParsedReference)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                int refleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
                int refright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
                ParsedReference ref = (ParsedReference)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
                
    ref.setTail(tail);
    RESULT = ref;

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(6/*reference*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // reference ::= simpleIdentifier 
            {
              ParsedReference RESULT = null;
                int refleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
                int refright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
                ParsedIdentifier ref = (ParsedIdentifier)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
                
 RESULT = new ParsedReference(ref);

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(6/*reference*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // assignment ::= simpleIdentifier EQUIV rval 
            {
              ParsedDeclaration RESULT = null;
                int nameleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                int nameright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                ParsedIdentifier name = (ParsedIdentifier)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                int equivleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                int equivright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                Symbol equiv = (Symbol)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                int rvalleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
                int rvalright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
                ParsedDeclaration rval = (ParsedDeclaration)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
                
 SourcePosition srcpos = new SourcePosition(parser.getLocation(), equiv);
 rval.setIdentifier(name);
 RESULT = rval;

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(5/*assignment*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // importation ::= simpleIdentifier EQUIV IMPORT reference FROM STRING 
            {
              ParsedDeclaration RESULT = null;
                int nameleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
                int nameright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
                ParsedIdentifier name = (ParsedIdentifier)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
                int keywordleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
                int keywordright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
                Symbol keyword = (Symbol)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                int refleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                int refright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                ParsedReference ref = (ParsedReference)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                int sourceleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
                int sourceright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
                Symbol source = (Symbol)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
                
    SourcePosition srcpos = new SourcePosition(parser.getLocation(), keyword);
    ParsedImport imp = new ParsedImport(srcpos, (String) source.value);
    ParsedDeclaration declaration = imp.getParsedDeclaration(ref);
    declaration.setIdentifier(name);
    RESULT = declaration;

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(4/*importation*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // importation ::= IMPORT reference FROM STRING AS simpleIdentifier 
            {
              ParsedDeclaration RESULT = null;
                int keywordleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
                int keywordright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
                Symbol keyword = (Symbol)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
                int nameleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
                int nameright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
                ParsedReference name = (ParsedReference)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
                int sourceleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                int sourceright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                Symbol source = (Symbol)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                int newnameleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
                int newnameright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
                ParsedIdentifier newname = (ParsedIdentifier)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
                
  SourcePosition srcpos = new SourcePosition(parser.getLocation(), keyword);
  ParsedImport imp = new ParsedImport(srcpos, (String) source.value);
  ParsedDeclaration declaration = imp.getParsedDeclaration(name);
  declaration.setIdentifier(newname);
  RESULT = declaration;

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(4/*importation*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // importation ::= IMPORT reference FROM STRING 
            {
              ParsedDeclaration RESULT = null;
                int keywordleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
                int keywordright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
                Symbol keyword = (Symbol)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                int nameleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                int nameright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                ParsedReference name = (ParsedReference)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                int sourceleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
                int sourceright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
                Symbol source = (Symbol)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
                
  SourcePosition srcpos = new SourcePosition(parser.getLocation(), keyword);
  ParsedImport imp = new ParsedImport(srcpos, (String) source.value);
  RESULT = imp.getParsedDeclaration(name);

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(4/*importation*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // massimport ::= IMPORT STRING 
            {
              ParsedDeclarationList RESULT = null;
                int keywordleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                int keywordright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                Symbol keyword = (Symbol)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                int sourceleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
                int sourceright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
                Symbol source = (Symbol)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
                
 SourcePosition srcpos = new SourcePosition(parser.getLocation(), keyword);
 ParsedImport imp = new ParsedImport(srcpos, (String) source.value);
 RESULT = imp.getParsedDeclarationList();

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(3/*massimport*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= simpleIdentifier EQUIV simpleIdentifier OPENBLOCK declarations CLOSEBLOCK 
            {
              ParsedDeclaration RESULT = null;
                int nameleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
                int nameright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
                ParsedIdentifier name = (ParsedIdentifier)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
                int typeleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
                int typeright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
                ParsedIdentifier type = (ParsedIdentifier)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                int declarationsleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                int declarationsright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                ParsedDeclarationList declarations = (ParsedDeclarationList)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                
    SourcePosition srcpos = type.getPos();
    RESULT = new ParsedDeclaration(srcpos, type, name, declarations);

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(1/*declaration*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= simpleIdentifier OPENBLOCK declarations CLOSEBLOCK 
            {
              ParsedDeclaration RESULT = null;
                int nameleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
                int nameright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
                ParsedIdentifier name = (ParsedIdentifier)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                int openleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                int openright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                Symbol open = (Symbol)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                int declarationsleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                int declarationsright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                ParsedDeclarationList declarations = (ParsedDeclarationList)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                int closeleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
                int closeright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
                Symbol close = (Symbol)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
                
    // Free standing list declaration.
    SourcePosition srcpos = new SourcePosition(parser.getLocation(), open, close);
    RESULT = new ParsedList(srcpos, name, declarations);

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(1/*declaration*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= importation 
            {
              ParsedDeclaration RESULT = null;
                int importationleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
                int importationright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
                ParsedDeclaration importation = (ParsedDeclaration)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
                
    RESULT = importation;

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(1/*declaration*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= simpleIdentifier simpleIdentifier OPENBLOCK declarations CLOSEBLOCK 
            {
              ParsedDeclaration RESULT = null;
                int typeleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
                int typeright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
                ParsedIdentifier type = (ParsedIdentifier)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
                int nameleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
                int nameright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
                ParsedIdentifier name = (ParsedIdentifier)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                int declarationsleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                int declarationsright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                ParsedDeclarationList declarations = (ParsedDeclarationList)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                
    SourcePosition srcpos = type.getPos();
    RESULT = new ParsedDeclaration(srcpos, type, name, declarations);

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(1/*declaration*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= massimport declarations 
            {
              ParsedDeclarationList RESULT = null;
                int partsleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                int partsright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                ParsedDeclarationList parts = (ParsedDeclarationList)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                int tailleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
                int tailright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
                ParsedDeclarationList tail = (ParsedDeclarationList)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
                
   tail.push(parts);
   RESULT = tail;

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(2/*declarations*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= assignment declarations 
            {
              ParsedDeclarationList RESULT = null;
                int partleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                int partright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                ParsedDeclaration part = (ParsedDeclaration)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                int tailleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
                int tailright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
                ParsedDeclarationList tail = (ParsedDeclarationList)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
                
    tail.push(part);
    RESULT = tail;

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(2/*declarations*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarations ::= declaration declarations 
            {
              ParsedDeclarationList RESULT = null;
                int partleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                int partright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                ParsedDeclaration part = (ParsedDeclaration)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                int tailleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
                int tailright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
                ParsedDeclarationList tail = (ParsedDeclarationList)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
                
    tail.push(part);
    RESULT = tail;

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(2/*declarations*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= declarations EOF 
            {
              Object RESULT = null;
                int start_valleft = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                int start_valright = ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                ParsedDeclarationList start_val = (ParsedDeclarationList)((StratmasClient.TaclanV2.java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                RESULT = start_val;
              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(0/*$START*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // declarations ::= 
            {
              ParsedDeclarationList RESULT = null;
                
 RESULT = new ParsedDeclarationList();

              CUP$Parser$result = new StratmasClient.TaclanV2.java_cup.runtime.Symbol(2/*declarations*/, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((StratmasClient.TaclanV2.java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new AssertionError(
               "Invalid action number found in internal parse table");

        }
    }
}

